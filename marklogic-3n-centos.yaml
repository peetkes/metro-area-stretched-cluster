version: '3.6'

services:
  bootstrap:
    image: marklogicdb/marklogic-db:${mlVersionTag}
    hostname: "${mlBootstrap}"
    container_name: "${mlBootstrap}"
    dns_search: ""
    environment:
      - MARKLOGIC_INIT=true
      - MARKLOGIC_ADMIN_USERNAME_FILE=mldb_admin_username
      - MARKLOGIC_ADMIN_PASSWORD_FILE=mldb_admin_password
      - TZ=Europe/Prague
    volumes:
      - ml_node1_data:/var/opt/MarkLogic:rw
      - ./data/MarkLogic1/Logs:/var/opt/MarkLogic/Logs:delegated
      - ./data/Marklogic1/export:/export/data/MarkLogic:rw
    secrets:
      - mldb_admin_password
      - mldb_admin_username
    ports:
      - "${mlBootstrapHealthPortMapping}"
      - "${mlBootstrapSystemPortMapping}"
      - "${mlBootstrapApplicationPortMapping}"
    networks:
      - external_net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 6G
    extra_hosts:
      host.docker.internal: host-gateway

  node1:
    image: marklogicdb/marklogic-db:${mlVersionTag}
    hostname: "${mlNode1}"
    container_name: "${mlNode1}"
    dns_search: ""
    environment:
      - MARKLOGIC_INIT=true
      - MARKLOGIC_ADMIN_USERNAME_FILE=mldb_admin_username
      - MARKLOGIC_ADMIN_PASSWORD_FILE=mldb_admin_password
      - MARKLOGIC_JOIN_CLUSTER=true
      - TZ=Europe/Prague
    volumes:
      - ml_node2_data:/var/opt/MarkLogic:rw
      - ./data/MarkLogic2/Logs:/var/opt/MarkLogic/Logs:delegated
      - ./data/MarkLogic2/export:/export/data/MarkLogic:rw
    secrets:
      - mldb_admin_password
      - mldb_admin_username
    ports:
      - "${mlNode1HealthPortMapping}"
      - "${mlNode1SystemPortMapping}"
      - "${mlNode1ApplicationPortMapping}"
    depends_on:
      - bootstrap
    networks:
      - external_net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 6G
    extra_hosts:
      host.docker.internal: host-gateway

  voter:
    image: marklogicdb/marklogic-db:${mlVersionTag}
    hostname: "${mlVoter}"
    container_name: "${mlVoter}"
    dns_search: ""
    environment:
      - MARKLOGIC_INIT=true
      - MARKLOGIC_ADMIN_USERNAME_FILE=mldb_admin_username
      - MARKLOGIC_ADMIN_PASSWORD_FILE=mldb_admin_password
      - MARKLOGIC_JOIN_CLUSTER=true
      - TZ=Europe/Prague
    volumes:
      - ml_node3_data:/var/opt/MarkLogic:rw
      - ./data/MarkLogic3/Logs:/var/opt/MarkLogic/Logs:delegated
    secrets:
      - mldb_admin_password
      - mldb_admin_username
    ports:
      - "${mlVoterHealthPortMapping}"
      - "${mlVoterSystemPortMapping}"
    depends_on:
      - bootstrap
      - node1
    networks:
      - external_net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    extra_hosts:
      host.docker.internal: host-gateway

  haproxy:
    image: haproxytech/haproxy-alpine:${lbVersion}
    #restart: always
    hostname: "haproxy"
    container_name: "haproxy"
    volumes:
      - ./haproxy-${lbVersion}:/usr/local/etc/haproxy/
    ports:
      - "${lbSystemPortMapping}"
      - "${lbApplicationPortMapping}"
      - "${lbAdminPortMapping}"
    expose:
      - "${lbExposeSystemPorts}"
      - "${lbExposeApplicationPorts}"
    networks:
      - external_net
    depends_on:
      - bootstrap
      - node1
      - voter
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
  activemq:
    image: rmohr/activemq:5.15.9-alpine
    hostname: "${activeMQHost}"
    container_name: "${activeMQHost}"
    ports:
      - "${activeMQAdminPortMapping}"
      - "${activeMQPortMapping}"
    networks:
      - external_net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
  
volumes:
  ml_node1_data:
  ml_node2_data:
  ml_node3_data:

secrets:
  mldb_admin_password:
    file: ./mldb_admin_password.txt
  mldb_admin_username:
    file: ./mldb_admin_username.txt

networks:
  external_net: {}
